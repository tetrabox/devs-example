/**
 */
package devs.provider;

import devs.util.DevsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DevsItemProviderAdapterFactory extends DevsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DevsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.DEVSModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DEVSModelItemProvider devsModelItemProvider;

	/**
	 * This creates an adapter for a {@link devs.DEVSModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDEVSModelAdapter() {
		if (devsModelItemProvider == null) {
			devsModelItemProvider = new DEVSModelItemProvider(this);
		}

		return devsModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.AtomicModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicModelItemProvider atomicModelItemProvider;

	/**
	 * This creates an adapter for a {@link devs.AtomicModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicModelAdapter() {
		if (atomicModelItemProvider == null) {
			atomicModelItemProvider = new AtomicModelItemProvider(this);
		}

		return atomicModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.CoupledModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoupledModelItemProvider coupledModelItemProvider;

	/**
	 * This creates an adapter for a {@link devs.CoupledModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoupledModelAdapter() {
		if (coupledModelItemProvider == null) {
			coupledModelItemProvider = new CoupledModelItemProvider(this);
		}

		return coupledModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link devs.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.TimeAdvance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeAdvanceItemProvider timeAdvanceItemProvider;

	/**
	 * This creates an adapter for a {@link devs.TimeAdvance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeAdvanceAdapter() {
		if (timeAdvanceItemProvider == null) {
			timeAdvanceItemProvider = new TimeAdvanceItemProvider(this);
		}

		return timeAdvanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.Lambda} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LambdaItemProvider lambdaItemProvider;

	/**
	 * This creates an adapter for a {@link devs.Lambda}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLambdaAdapter() {
		if (lambdaItemProvider == null) {
			lambdaItemProvider = new LambdaItemProvider(this);
		}

		return lambdaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.OutPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutPortItemProvider outPortItemProvider;

	/**
	 * This creates an adapter for a {@link devs.OutPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutPortAdapter() {
		if (outPortItemProvider == null) {
			outPortItemProvider = new OutPortItemProvider(this);
		}

		return outPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.InPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InPortItemProvider inPortItemProvider;

	/**
	 * This creates an adapter for a {@link devs.InPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInPortAdapter() {
		if (inPortItemProvider == null) {
			inPortItemProvider = new InPortItemProvider(this);
		}

		return inPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.InternalTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalTransitionItemProvider internalTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link devs.InternalTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalTransitionAdapter() {
		if (internalTransitionItemProvider == null) {
			internalTransitionItemProvider = new InternalTransitionItemProvider(this);
		}

		return internalTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.ExternalTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalTransitionItemProvider externalTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link devs.ExternalTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalTransitionAdapter() {
		if (externalTransitionItemProvider == null) {
			externalTransitionItemProvider = new ExternalTransitionItemProvider(this);
		}

		return externalTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.ExternalInputCoupling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalInputCouplingItemProvider externalInputCouplingItemProvider;

	/**
	 * This creates an adapter for a {@link devs.ExternalInputCoupling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalInputCouplingAdapter() {
		if (externalInputCouplingItemProvider == null) {
			externalInputCouplingItemProvider = new ExternalInputCouplingItemProvider(this);
		}

		return externalInputCouplingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.InternalCoupling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalCouplingItemProvider internalCouplingItemProvider;

	/**
	 * This creates an adapter for a {@link devs.InternalCoupling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalCouplingAdapter() {
		if (internalCouplingItemProvider == null) {
			internalCouplingItemProvider = new InternalCouplingItemProvider(this);
		}

		return internalCouplingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devs.OutputCoupling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputCouplingItemProvider outputCouplingItemProvider;

	/**
	 * This creates an adapter for a {@link devs.OutputCoupling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputCouplingAdapter() {
		if (outputCouplingItemProvider == null) {
			outputCouplingItemProvider = new OutputCouplingItemProvider(this);
		}

		return outputCouplingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (devsModelItemProvider != null) devsModelItemProvider.dispose();
		if (atomicModelItemProvider != null) atomicModelItemProvider.dispose();
		if (coupledModelItemProvider != null) coupledModelItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (timeAdvanceItemProvider != null) timeAdvanceItemProvider.dispose();
		if (lambdaItemProvider != null) lambdaItemProvider.dispose();
		if (outPortItemProvider != null) outPortItemProvider.dispose();
		if (inPortItemProvider != null) inPortItemProvider.dispose();
		if (internalTransitionItemProvider != null) internalTransitionItemProvider.dispose();
		if (externalTransitionItemProvider != null) externalTransitionItemProvider.dispose();
		if (externalInputCouplingItemProvider != null) externalInputCouplingItemProvider.dispose();
		if (internalCouplingItemProvider != null) internalCouplingItemProvider.dispose();
		if (outputCouplingItemProvider != null) outputCouplingItemProvider.dispose();
	}

}
